org: simonschiebler
app: blckbook
service: backend

plugins:
  - serverless-plugin-common-excludes
  - aws-amplify-serverless-plugin
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
  - serverless-plugin-include-dependencies
  - serverless-lift
package:
  individually: true

custom:
  # tezos data definitions
  tezos_rpc_client_interface: 
    dev: 'https://rpc.ghostnet.teztnets.xyz'
    prod: 'https://rpc.ghostnet.teztnets.xyz'
  voter_money_pool_contract_address:
    dev: 'KT1Ats6HPT2ePmwY37QXbedm9noiXocNAwS8'
    prod: 'KT1Ats6HPT2ePmwY37QXbedm9noiXocNAwS8'
  auction_house_contract_address: 
    dev: 'KT1CNZsuSMFpkGN1D3gAkQtfnTGMzaRk1JBM'
    prod: 'KT1CNZsuSMFpkGN1D3gAkQtfnTGMzaRk1JBM'
  the_vote_contract_address:
    dev: 'KT1NXAMxDzSjgFv6L3Z7WW6HNUbBY2rHXaVV'
    prod: 'KT1NXAMxDzSjgFv6L3Z7WW6HNUbBY2rHXaVV'
  fa2_contract_address: 
    dev: 'KT1Nqn4twmvFssgnwhgkjFeMsHiceg1tZbKV'
    prod: 'KT18tsEcP2KoD3U4EdMUderfmxyWBzgo2QF2'
  bank_contract_address:
    dev: 'KT1TYrapwmRFkvHbYWAR3qXxcGXgMjubJvmP'
    prod: 'KT1TYrapwmRFkvHbYWAR3qXxcGXgMjubJvmP'
  tzkt_address:
    dev: 'https://api.ghostnet.tzkt.io/v1/'
    prod: 'https://api.ghostnet.tzkt.io/v1/'


  # resource name definitions
  notification_table_name: 'notifications-${opt:stage, self:provider.stage}'
  user_info_table_name: 'user-info-${opt:stage, self:provider.stage}'
  uploaded_artworks_table_name: 'uploaded-artworks-${opt:stage, self:provider.stage}'
  vote_pages_table_name: 'votes-pages-${opt:stage, self:provider.stage}'
  artwork_upload_s3_bucket_name: 'blckbook-uploaded-artworks-${opt:stage, self:provider.stage}' 
  archive_table_name: 'archive-${opt:stage, self:provider.stage}'
  blckbook_user_pool: ${opt:stage, self:provider.stage}-blckbook-users
  minted_artworks_table_name: minted-artworks-${opt:stage, self:provider.stage}
  period_table_name: period-table-${opt:stage, self:provider.stage}
  admissioned_artworks_table: admissioned-artworks-${opt:stage, self:provider.stage}
  
  minting_queue_name: 'MintingQueue-${opt:stage, self:provider.stage}.fifo'
  admission_queue_name: 'AdmissionQueue-${opt:stage, self:provider.stage}.fifo'
  notification_queue_name: 'NotificationQueue-${opt:stage, self:provider.stage}.fifo'
  ipfsUpload_queue_name: 'IpfsUploadQueue-${opt:stage, self:provider.stage}.fifo'

  # backend data definitions
  max_votes_per_user: 5
  best_percentile: 10
  periodDuration: 604800000 # in ms
  frontend_host_name: 
    dev: "https://dev.blckbook.vote"
    prod: "https://blckbook.vote"
  period_check: "rate(10 minutes)"
  max_uploads_per_period: 1
  amplify:
    - filename: ../frontend/src/aws-exports-${opt:stage, self:provider.stage}.ts
      type: typescript
      appClient: BlckBookUsersClient
      s3bucket: disabled
  includeDependencies:
    enableCaching: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  region: 'eu-west-1'
  environment:
    
    FA2_CONTRACT_ADDRESS: ${self:custom.fa2_contract_address.${opt:stage, self:provider.stage}}
    AUCTION_HOUSE_CONTRACT_ADDRESS:  ${self:custom.auction_house_contract_address.${opt:stage, self:provider.stage}}
    VOTER_MONEY_POOL_CONTRACT_ADDRESS: ${self:custom.voter_money_pool_contract_address.${opt:stage, self:provider.stage}}
    TEZOS_RPC_CLIENT_INTERFACE: ${self:custom.tezos_rpc_client_interface.${opt:stage, self:provider.stage}}
    THE_VOTE_CONTRACT_ADDRESS: ${self:custom.the_vote_contract_address.${opt:stage, self:provider.stage}}
    BANK_CONTRACT_ADDRESS: ${self:custom.bank_contract_address.${opt:stage, self:provider.stage}}

    TZKT_ADDRESS: ${self:custom.tzkt_address.${opt:stage, self:provider.stage}}

    FRONTEND_HOST_NAME: ${self:custom.frontend_host_name.${opt:stage, self:provider.stage}}
    USER_INFO_TABLE_NAME: ${self:custom.user_info_table_name}
    UPLOADED_ARTWORKS_TABLE_NAME: ${self:custom.uploaded_artworks_table_name}
    MAX_UPLOADS_PER_PERIOD: ${self:custom.max_uploads_per_period}
    MAX_VOTES_PER_PERIOD: ${self:custom.max_votes_per_user}
    VOTE_PAGES_TABLE_NAME: ${self:custom.vote_pages_table_name}
    ARTWORK_UPLOAD_S3_BUCKET_NAME:  ${self:custom.artwork_upload_s3_bucket_name}
    PERIOD_TABLE_NAME: ${self:custom.period_table_name}
    NOTIFICATION_TABLE_NAME: ${self:custom.notification_table_name}
    ARCHIVE_TABLE_NAME: ${self:custom.archive_table_name}
    MINTED_ARTWORKS_TABLE_NAME: ${self:custom.minted_artworks_table_name}
    ADMISSIONED_ARTWORKS_TABLE_NAME: ${self:custom.admissioned_artworks_table}

    MINTING_QUEUE_NAME: ${self:custom.minting_queue_name}
    ADMISSION_QUEUE_NAME: ${self:custom.admission_queue_name}
    NOTIFICATION_QUEUE_NAME: ${self:custom.notification_queue_name}
    IPFS_UPLOAD_QUEUE_NAME: ${self:custom.ipfsUpload_queue_name} 

    PERIOD_DURATION: ${self:custom.periodDuration}
    BEST_PERCENTILE: ${self:custom.best_percentile}
    PERIOD_CHECK: ${self:custom.period_check}
    AUCTION_LENGTH: 4320 #minutes
    USER_POOL_ID:
      Ref: BlckBookUsers
    STAGE:  ${opt:stage, self:provider.stage}

functions:
  - ${file(./src/eventTriggered/config.yml)}
  - ${file(./src/rest/artwork/getCurrentUpload/config.yml)}
  - ${file(./src/rest/artwork/initArtworkUpload/config.yml)}
  - ${file(./src/rest/artwork/admin/getUploadedArtworks/config.yml)}
  - ${file(./src/rest/artwork/admin/getUncheckedUploadedArtworks/config.yml)}
  - ${file(./src/rest/artwork/admin/updateUploadedArtwork/config.yml)}
  - ${file(./src/rest/artwork/admin/rejectUploadedArtwork/config.yml)}
  - ${file(./src/rest/artwork/deleteMyCurrentUpload/config.yml)}
  - ${file(./src/rest/user/admin/banUser/config.yml)}
  - ${file(./src/rest/user/setMyWalletId/config.yml)}
  - ${file(./src/rest/user/getMyUserInfo/config.yml)}
  - ${file(./src/rest/vote/getVotePage/config.yml)}
  - ${file(./src/rest/vote/voteForArtworks/config.yml)}
  - ${file(./src/rest/vote/getVotableArtworkById/config.yml)}
  - ${file(./src/rest/vote/getMyVotes/config.yml)}
  - ${file(./src/rest/vote/getMyProposition/config.yml)}
  - ${file(./src/rest/notifications/config.yml)}
  - ${file(./src/rest/period/getCurrentPeriod/config.yml)}
  - ${file(./src/rest/mints/getMintedArtworkByTokenId/config.yml)}
  
resources:
  Resources:
    BlckBookUsers:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.blckbook_user_pool}
        AutoVerifiedAttributes:
          - email
        AliasAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: "verified_email"
              Priority: 1
        
        Schema:
          - AttributeDataType: "String"
            Name: "email"
            Required: true
            Mutable: false

    BlckBookUsersClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${opt:stage, self:provider.stage}-blckbook-users-client
        UserPoolId: 
          Ref: BlckBookUsers
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        SupportedIdentityProviders:
          - COGNITO
        GenerateSecret: false
    
    BlckBookUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: 
          Ref: BlckBookUsers
        GroupName: 'User'
        Description: 'Base role for verified users on BLCKBOOK'
        Precedence: 1
    
    BlckBookAdminPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: 
          Ref: BlckBookUsers
        GroupName: 'Admin'
        Description: 'Base role for admins on BLCKBOOK'
        Precedence: 0

    BlckBookIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
         
    UploadedArtworksBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.artwork_upload_s3_bucket_name}
        AccessControl: Private
        CorsConfiguration:
            CorsRules:
            -   AllowedHeaders: ["*"]
                AllowedMethods: ["GET","PUT"]
                AllowedOrigins: ["*"]
    
    userInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: walletId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        TableName: ${self:custom.user_info_table_name}
        GlobalSecondaryIndexes:
          - IndexName: walletIdIndex           
            KeySchema:
              - AttributeName: walletId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'

    uploadedArtworkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: uploaderId
            AttributeType: "S"
          - AttributeName: uploadTimestamp
            AttributeType: "N"
        KeySchema:
          - AttributeName: uploaderId
            KeyType: HASH
          - AttributeName: uploadTimestamp
            KeyType: "RANGE"
        TableName: ${self:custom.uploaded_artworks_table_name}
    
    periodTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: periodId
            AttributeType: "S"
        KeySchema:
          - AttributeName: periodId
            KeyType: HASH
        TableName: ${self:custom.period_table_name}
    
    notificationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: "S"
          - AttributeName: timestamp
            AttributeType: "N"
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        TableName: ${self:custom.notification_table_name}
    
    votePagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: artworkId
            AttributeType: S
          - AttributeName: pageNumber
            AttributeType: N
          - AttributeName: uploaderId
            AttributeType: S
        KeySchema:
          - AttributeName: artworkId
            KeyType: HASH
        TableName: ${self:custom.vote_pages_table_name}
        GlobalSecondaryIndexes:
          - IndexName: PageIndex           
            KeySchema:
              - AttributeName: pageNumber
                KeyType: HASH
              - AttributeName: artworkId
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
          - IndexName: uploaderIndex           
            KeySchema:
              - AttributeName: uploaderId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'

    admissionedArtworksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: artworkId
            AttributeType: S
        KeySchema:
          - AttributeName: artworkId
            KeyType: HASH
        TableName: ${self:custom.admissioned_artworks_table}

    archive:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: artworkId
            AttributeType: "S"
        KeySchema:
          - AttributeName: artworkId
            KeyType: HASH
        TableName: ${self:custom.archive_table_name}
  
    mintedArtworks:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: tokenId
            AttributeType: "N"
        KeySchema:
          - AttributeName: tokenId
            KeyType: HASH
        TableName: ${self:custom.minted_artworks_table_name}

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    MintingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        VisibilityTimeout: 180
        QueueName: ${self:custom.minting_queue_name}
        ContentBasedDeduplication: true
        FifoQueue: true

    AdmissionQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        VisibilityTimeout: 180
        QueueName: ${self:custom.admission_queue_name}
        ContentBasedDeduplication: true
        FifoQueue: true

    IpfsUploadQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        VisibilityTimeout: 180
        QueueName: ${self:custom.ipfsUpload_queue_name}
        ContentBasedDeduplication: true
        FifoQueue: true
    
    NotificationQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        VisibilityTimeout: 180
        QueueName: ${self:custom.notification_queue_name}
        ContentBasedDeduplication: true
        FifoQueue: true
