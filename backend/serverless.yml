org: simonschiebler
app: blckbook
service: backend

plugins:
  - aws-amplify-serverless-plugin

custom:
  user_info_table_name: 'user-info-${self:provider.stage}'
  uploaded_artworks_table_name: 'uploaded-artworks-${self:provider.stage}'
  uploaded_artworks_admin_view_table_name: 'uploaded-artworks-Amdin-View-${self:provider.stage}'
  amplify:
    - filename: ../frontend/src/aws-exports.ts
      type: typescript
      appClient: BlckBookUsersClient
      s3bucket: disabled

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  region: 'eu-west-1'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [ BlckBookUsers, Arn ]
  environment:
    USER_INFO_TABLE: ${self:custom.user_info_table_name}
    UPLOADED_ARTWORKS_TABLE: ${self:custom.uploaded_artworks_table_name}
    UPLOADED_ARTWORKS_ADMIN_VIEW_TABLE: ${self:custom.uploaded_artworks_admin_view_table_name}

functions:
  initializeUser:
    handler: lambdas/createNewUserObject.handler
    events:
      - cognitoUserPool:
          pool: ${self:provider.stage}-blckbook-users
          trigger: PostConfirmation
          existing: true
  api:
    handler: lambdas/user.handler
    events:
      - http:
          path: /users
          method: ANY

resources:
  Resources:
    BlckBookUsers:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-blckbook-users
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    BlckBookUsersClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-blckbook-users-client
        UserPoolId: 
          Ref: BlckBookUsers
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
    
    userInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        TableName: ${self:custom.user_info_table_name}

    uploadedArtworkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: artworkId
            AttributeType: S
        KeySchema:
          - AttributeName: artworkId
            KeyType: HASH
        TableName: ${self:custom.uploaded_artworks_table_name}
    
    uploadedArtworkAdminViewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: periodId
            AttributeType: S
          - AttributeName: uploadDate
            AttributeType: S
        KeySchema:
          - AttributeName: periodId
            KeyType: HASH
          - AttributeName: uploadDate
            KeyType: RANGE
        TableName: ${self:custom.uploaded_artworks_admin_view_table_name}
