org: simonschiebler
app: blckbook
service: backend

plugins:
  - serverless-plugin-common-excludes
  - aws-amplify-serverless-plugin
  - serverless-plugin-typescript
  - serverless-iam-roles-per-function
  - serverless-plugin-include-dependencies

package:
  individually: true

custom:
  user_info_table_name: 'user-info-${self:provider.stage}'
  uploaded_artworks_table_name: 'uploaded-artworks-${self:provider.stage}'
  uploaded_artworks_admin_view_table_name: 'uploaded-artworks-Amdin-View-${self:provider.stage}'
  artwork_upload_s3_bucket_name: 'blckbook-uploaded-artworks' 
  blckbook_user_pool: ${self:provider.stage}-blckbook-users
  period_table_name: period-table
  max_uploads_per_period: 1
  amplify:
    - filename: ../frontend/src/aws-exports.ts
      type: typescript
      appClient: BlckBookUsersClient
      s3bucket: disabled
  includeDependencies:
    enableCaching: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  region: 'eu-west-1'

functions:
  updateUserstateAfterUpload:
    handler: "src/eventTriggered/updateUserstateAfterUpload.handler"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt: [ userInfoTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - Fn::GetAtt: [ uploadedArtworkTable, Arn ]
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource:
          - Fn::GetAtt: [ UploadedArtworksBucket, Arn ]
    events:
      - s3:
          bucket: ${self:custom.artwork_upload_s3_bucket_name}
          event: s3:ObjectCreated:*
          rules:
            - prefix: artwork/
          existing: true
    environment:
      USER_INFO_TABLE_NAME: ${self:custom.user_info_table_name}
      MAX_UPLOADS_PER_PERIOD: ${self:custom.max_uploads_per_period}
      UPLOADED_ARTWORKS_TABLE_NAME: ${self:custom.uploaded_artworks_table_name}

  initializeUser:
    handler: "src/eventTriggered/createNewUserInfoObject.handler"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt: [ userInfoTable, Arn ]
      - Effect: Allow
        Action:
          - cognito-idp:AdminAddUserToGroup
        Resource:
          - Fn::GetAtt: [ BlckBookUsers, Arn ]
    events:
      - cognitoUserPool:
          pool: ${self:provider.stage}-blckbook-users
          trigger: PostConfirmation
          existing: true
    environment:
      USER_INFO_TABLE_NAME: ${self:custom.user_info_table_name}
      USER_POOL_ID:
        Ref: BlckBookUsers
        
  getCurrentUpload:
    handler: "src/rest/artwork/getCurrentUpload/get.handler"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::GetAtt: [ uploadedArtworkTable, Arn ]
    environment:
      UPLOADED_ARTWORKS_TABLE_NAME: ${self:custom.uploaded_artworks_table_name}
    events:
      - http:
          path: api/artwork/getCurrentUpload
          authorizer: 
            name: BlckBookUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - BlckBookUsers
                - Arn
          method: get
          cors: true
    
  initArtworkUpload:
    handler: "src/rest/artwork/initArtworkUpload/post.handler"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
          - s3:PutObjectAcl
        Resource:
          - arn:aws:s3:::${self:custom.artwork_upload_s3_bucket_name}/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt: [ uploadedArtworkTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt: [ userInfoTable, Arn ]
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt: [ periodTable, Arn ]
    environment:
      ARTWORK_UPLOAD_S3_BUCKET_NAME:  ${self:custom.artwork_upload_s3_bucket_name}
      USER_INFO_TABLE_NAME: ${self:custom.user_info_table_name}
      PERIOD_TABLE_NAME: ${self:custom.period_table_name}
      MAX_UPLOADS_PER_PERIOD: ${self:custom.max_uploads_per_period}
    events:
      - http:
          path: api/artwork/initArtworkUpload
          authorizer: 
            name: BlckBookUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - BlckBookUsers
                - Arn
          method: post
          cors: true

  adminGetUploadedArtworks:
    handler: src/rest/artwork/admin/getUploadedArtworks/get.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - Fn::GetAtt: [ uploadedArtworkTable, Arn ]
    events:
      - http:
          path: api/artwork/admin/getUploadedArtworks
          authorizer: 
            name: BlckBookUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - BlckBookUsers
                - Arn
          method: get
    environment:
      UPLOADED_ARTWORKS_TABLE: ${self:custom.uploaded_artworks_table_name}
  
  adminUpdateUploadedArtwork:
    handler: src/rest/artwork/admin/updateUploadedArtwork/post.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - Fn::GetAtt: [ uploadedArtworkTable, Arn ]
    events:
      - http:
          path: api/artwork/admin/updateUploadedArtwork
          authorizer: 
            name: BlckBookUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - BlckBookUsers
                - Arn
          method: post
    environment:
      UPLOADED_ARTWORKS_TABLE: ${self:custom.uploaded_artworks_table_name}

resources:
  Resources:
    BlckBookUsers:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.blckbook_user_pool}
        AutoVerifiedAttributes:
          - email
        AliasAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: "verified_email"
              Priority: 1
        Schema:
          - AttributeDataType: "String"
            Name: "email"
            Required: true
            Mutable: false

    BlckBookUsersClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-blckbook-users-client
        UserPoolId: 
          Ref: BlckBookUsers
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        SupportedIdentityProviders:
          - COGNITO
        GenerateSecret: false
    
    BlckBookUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: 
          Ref: BlckBookUsers
        GroupName: 'User'
        Description: 'Base role for verified users on BLCKBOOK'
        Precedence: 1
    
    BlckBookAdminPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        UserPoolId: 
          Ref: BlckBookUsers
        GroupName: 'Admin'
        Description: 'Base role for admins on BLCKBOOK'
        Precedence: 0

    BlckBookIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
         
    UploadedArtworksBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.artwork_upload_s3_bucket_name}
        AccessControl: Private
        CorsConfiguration:
            CorsRules:
            -   AllowedHeaders: ["*"]
                AllowedMethods: ["GET","PUT"]
                AllowedOrigins: ["*"]
    
    userInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        TableName: ${self:custom.user_info_table_name}

    uploadedArtworkTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: uploaderId
            AttributeType: "S"
          - AttributeName: uploadTimestamp
            AttributeType: "N"
        KeySchema:
          - AttributeName: uploaderId
            KeyType: HASH
          - AttributeName: uploadTimestamp
            KeyType: "RANGE"
        TableName: ${self:custom.uploaded_artworks_table_name}
    
    periodTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: periodId
            AttributeType: "S"
        KeySchema:
          - AttributeName: periodId
            KeyType: HASH
        TableName: ${self:custom.period_table_name}
    
    uploadedArtworkAdminViewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: periodId
            AttributeType: S
          - AttributeName: uploadDate
            AttributeType: S
        KeySchema:
          - AttributeName: periodId
            KeyType: HASH
          - AttributeName: uploadDate
            KeyType: RANGE
        TableName: ${self:custom.uploaded_artworks_admin_view_table_name}
